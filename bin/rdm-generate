#!/usr/bin/env ruby
# -*- encoding: utf-8 -*-

require 'rubygems'
require 'bundler'
require 'rdm'
require 'optparse'

current_dir = `pwd`.chomp

options = {
  skip_rspec: false
}

if ARGV[0] != 'package'
  puts "Unsupported generator command provided. Please use `rdm-generate package PACKAGE_NAME args`."
  exit 1
end

package_name = ARGV[1].to_s.strip
if package_name.empty?
  puts 'Package name was not specified'
  exit 1
end

OptionParser.new do |opts|
  opts.banner = "Usage: rdm-generate package PACKAGE_NAME --path=RELATIVE_PATH --skip-rspec"

  opts.on('--skip-rspec', 'Skip rspec generation') do
    options[:skip_rspec] = true
  end

  opts.on('--path=', '', 'Package relative path') do |v|
    options[:path] = v.strip
  end
end.parse!

if options[:path].nil?
  options[:path] = package_name.downcase.gsub(/\s+/, '_')
end

options[:path].gsub!(/^\/+/, '')

puts "Generating package #{package_name} to #{options[:path]}"

begin
  Rdm::PackageGenerator.generate_package(current_dir, package_name, options[:path], options[:skip_rspec])
rescue Errno::ENOENT
  puts "#{Rdm::SOURCE_FILENAME} not found. Please run on directory containing #{Rdm::SOURCE_FILENAME}"
rescue Rdm::Errors::PackageExists
  puts "Error. Package already exist. Package was not generated"
rescue Rdm::Errors::PackageDirExists
  puts "Error. Directory #{options[:path]} exists. Package was not generated"
end
